networks:
  app:
    driver: bridge

# volumes:
#   mysql:
#     driver: local
#   redis:
#     driver: local

# @see https://github.com/jaygaha/laravel-11-frankenphp-docker/blob/main/docker-compose.yml
# @see https://github.com/dunglas/symfony-docker/blob/main/compose.yaml
# @see https://frankenphp.dev/cn/docs/laravel/
services:
  app:
    container_name: bird-api
    build:
      context: .
      dockerfile: ./image/laravel/Dockerfile
      args:
        - ROOT_DIR=.
    image: bird-api
    ports:
      # - "80:80" # HTTP
      # - "443:443" # HTTPS
      # - "443:443/udp" # HTTP3
      - "8000:8000" # HTTP
    volumes:
      - ./projects/api:/app
    networks:
      - app
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      fileview:
        condition: service_started
      # minio:
      #   condition: service_healthy
      # mailpit:
      #   condition: service_healthy
    # healthcheck: # doesn't uncomment healthcheck when use app volumns
    #   test: [ "CMD", "curl http://localhost:8000/"]
    #   retries: 3
    #   timeout: 60s

  # dashboard:
  #   build:
  #     context: .
  #     dockerfile: ./image/dashboard/Dockerfile
  #     args:
  #       - ROOT_DIR=.
  #   restart: unless-stopped
  #   ports:
  #     - "8001:80" # HTTP
  #     # - "8001:3000" # HTTP
  #   depends_on:
  #     app:
  #       condition: service_healthy

  aves_blast:
    platform: linux/amd64
    container_name: bird-aves_blast
    build:
      context: .
      dockerfile: ./image/aves_blast/Dockerfile
      args:
        - ROOT_DIR=.
    image: bird-aves_blast
    volumes:
      - ./projects/aves_blast:/app
    networks:
      - app
    depends_on:
      app:
        condition: service_started

  redis:
    container_name: bird-redis
    image: redis:alpine
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - ./data/redis:/data
    networks:
      - app
    healthcheck:
      test: [ "CMD", "redis-cli", "ping"]
      retries: 3
      timeout: 5s
      start_interval: 1s

  mysql:
    container_name: bird-mysql
    image: mysql/mysql-server:${MYSQL_VERSION:-8.0}
    ports:
      - ${DB_PORT:-3306}:3306
    environment:
      MYSQL_HOST: ${DB_HOST:-%}
      MYSQL_DATABASE: ${DB_DATABASE:-app}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}

      MYSQL_ROOT_HOST: ${DB_HOST:-%}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-%}
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --default-authentication-plugin=mysql_native_password
    volumes:
      - ./data/mysql:/var/lib/mysql
    networks:
      - app
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-p ${DB_PASSWORD}"]
      # test: [ "CMD", "mysql", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}", "select 1", "${DB_DATABASE}"]
      retries: 3
      timeout: 5s
      start_interval: 1s

  rabbitmq:
    container_name: bird-rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - "${RABBITMQ_NODE_HOST_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT:-15672}:15672"
    privileged: true
    networks:
      - app
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping"]
      timeout: 5s
      retries: 3
      start_interval: 1s

  # minio:
  #   image: minio/minio:latest
  #   restart: unless-stopped
  #   ports:
  #     - ${MINIO_PORT:-9000}:9000
  #     - ${MINIO_CONSOLE_PORT:-8900}:8900
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER:-root}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_app}
  #     MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minio}
  #     MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minio_app}
  #     MINIO_SERVER_URL: ${MINIO_SERVER_URL:-http://127.0.0.1:9000}
  #     MINIO_PROMETHEUS_AUTH_TYPE: ${MINIO_PROMETHEUS_AUTH_TYPE:-public}
  #   volumes:
  #       - ./data/minio:/data
  #   networks:
  #     - app
  #   command: minio server /data/minio --console-address ":${MINIO_CONSOLE_PORT}"
  #   healthcheck:
  #     test: [ "CMD", "curl -f http://localhost:${MINIO_PORT}/minio/health/live"]
  #     retries: 3
  #     timeout: 5s

  # docker run -itd --name fileview -e KK_BASE_URL=https://fileview.iwnweb.com -e KK_LOCAL_PREVIEW_DIR=file -p 10002:8012 keking/kkfileview
  fileview:
    container_name: bird-fileview
    platform: linux/amd64
    image: keking/kkfileview:4.1.0
    environment:
      - KK_BASE_URL=http://127.0.0.1:8012
      - KK_LOCAL_PREVIEW_DIR=file
    ports:
      - 8012:8012
    healthcheck:
      test: [ "CMD", "curl http://127.0.0.1:8012"]
      interval: 55s
      timeout: 5s
      retries: 3
      start_interval: 1s
    ulimits:
      nproc: 65535
      nofile:
        soft: 65536
        hard: 65536

  mailpit:
    container_name: bird-mailpit
    image: axllent/mailpit:latest
    ports:
        - ${MAILPIT_PORT:-1025}:1025
        - ${MAILPIT_DASHBOARD_PORT:-8025}:8025
    volumes:
        - ./data/mail:/data
    networks:
        - app
